Чтобы вывести три поста и три текста в вашем приложении, мы можем использовать массив данных для хранения информации о постах и текстах. Затем мы отобразим эти данные с помощью компонентов React.

Шаг 1: Создание данных для постов и текстов
Создадим файл data.js в директории src для хранения данных о постах и текстах:


// src/data.js
export const posts = [
  {
    id: 1,
    title: 'Пост 1',
    content: 'Это содержимое первого поста.',
    image: 'https://via.placeholder.com/300x200?text=Post+1'
  },
  {
    id: 2,
    title: 'Пост 2',
    content: 'Это содержимое второго поста.',
    image: 'https://via.placeholder.com/300x200?text=Post+2'
  },
  {
    id: 3,
    title: 'Пост 3',
    content: 'Это содержимое третьего поста.',
    image: 'https://via.placeholder.com/300x200?text=Post+3'
  }
];

export const texts = [
  {
    id: 1,
    content: 'Это первый случайный текст.'
  },
  {
    id: 2,
    content: 'Это второй случайный текст.'
  },
  {
    id: 3,
    content: 'Это третий случайный текст.'
  }
];
Шаг 2: Создание компонента для отображения постов
Создадим компонент Posts.jsx для отображения постов:


// src/Posts.jsx
import React from 'react';
import { posts } from './data';
import './Posts.css';

const Posts = () => {
  return (
    <div className="posts-container">
      {posts.map(post => (
        <div key={post.id} className="post">
          <h2>{post.title}</h2>
          <img src={post.image} alt={post.title} />
          <p>{post.content}</p>
        </div>
      ))}
    </div>
  );
};

export default Posts;
Шаг 3: Создание компонента для отображения текстов
Создадим компонент Texts.jsx для отображения текстов:


// src/Texts.jsx
import React from 'react';
import { texts } from './data';
import './Texts.css';

const Texts = () => {
  return (
    <div className="texts-container">
      {texts.map(text => (
        <div key={text.id} className="text">
          <p>{text.content}</p>
        </div>
      ))}
    </div>
  );
};

export default Texts;
Шаг 4: Создание файлов стилей для компонентов
Создадим файлы стилей для компонентов Posts и Texts:


/* src/Posts.css */
.posts-container {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.post {
  border: 1px solid #ccc;
  border-radius: 8px;
  margin: 10px;
  padding: 10px;
  max-width: 300px;
  text-align: center;
}

.post img {
  max-width: 100%;
  height: auto;
  border-radius: 8px;
}

/* src/Texts.css */
.texts-container {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.text {
  border: 1px solid #ccc;
  border-radius: 8px;
  margin: 10px;
  padding: 10px;
  max-width: 300px;
  text-align: center;
}
Шаг 5: Импорт и использование компонентов в App.jsx
Откройте файл src/App.jsx и измените его следующим образом:


// src/App.jsx
import React from 'react';
import Posts from './Posts';
import Texts from './Texts';
import './App.css';

const App = () => {
  return (
    <div className="App">
      <h1>Посты</h1>
      <Posts />
      <h1>Тексты</h1>
      <Texts />
    </div>
  );
};

export default App;
Шаг 6: Запуск приложения
Теперь попробуйте снова запустить приложение:


npm run dev
Пример структуры проекта
Убедитесь, что структура вашего проекта выглядит примерно так:


my-vite-react-app/
├── node_modules/
├── public/
│   ├── index.html
│   └── ...
├── src/
│   ├── App.css
│   ├── App.jsx
│   ├── index.css
│   ├── main.jsx
│   ├── data.js
│   ├── Posts.css
│   ├── Posts.jsx
│   ├── Texts.css
│   ├── Texts.jsx
│   └── ...
├── package.json
├── vite.config.js
├── README.md
└── ...
Заключение
Теперь у вас есть приложение Vite с шаблоном React, которое отображает три поста и три текста. Вы можете продолжать расширять и улучшать свое приложение, добавляя новые компоненты и функциональность. Если у вас возникнут дополнительные вопросы или проблемы, пожалуйста, дайте знать!
